# ------------------------------------------------------------------------------------------------------------------ #
# 前缀为 `(反引号) 
# ------------------------------------------------------------------------------------------------------------------ #
unbind C-b                      # 解除默认的 Ctrl+b 前缀键绑定
set -g prefix `                 # 反引号为唯一前缀
bind ` send-keys `              # 如果要输入反引号, 连续按两次反引号即可输入一个反引号字符



# ------------------------------------------------------------------------------------------------------------------ #
# 解决 Kitty → SSH → tmux → Neovim 这个连接逻辑，nvim 中"+y 剪贴板无法同步到本地机器的剪贴板中
# 现在默认 y 使用 unnamedplus 寄存器，y 后直接同步到本地主机的剪贴板中。参考 nivm options.lua 文件中配置
# 该解决方案由 Claude 3.7 一发入魂，当初折腾半天似乎没找到病因
# set -s set-clipboard on 这个在下面的 yazi 的相关配置中已经设置了
# ------------------------------------------------------------------------------------------------------------------ #
set -g allow-passthrough on


# ------------------------------------------------------------------------------------------------------------------ #
# session
# ------------------------------------------------------------------------------------------------------------------ #
bind n new-session                                      # 新建一个 session 并自动进入
bind r command-prompt -I "#S" "rename-session '%%'"     # 重命名当前 session



# ------------------------------------------------------------------------------------------------------------------ #
# window
# ------------------------------------------------------------------------------------------------------------------ #
set -g base-index 1             # 窗口(window)编号从 1 开始
set -g renumber-windows on      # 关闭 window 后, 自动重新编号剩余 windows
setw -g monitor-activity on     # 非打开窗口有输出或有命令正在执行(如 nvim 编辑)，窗口标题变蓝，尾部有个井号
setw -g aggressive-resize on    # 使用多个客户端连接到同一个 tmux session, 当一个客户端调整窗口(window)大小时，
                                # 其他客户端的 window 不会改变

# create new windows/panes in same directory
bind c new-window -c "#{pane_current_path}"
bind - split-window -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"

bind , kill-window      # 关闭当前窗口

setw -g automatic-rename on         # 根据当前运行的命令或程序自动重命名 window 名称
set -g automatic-rename-format '#{?#{==:#{pane_current_command},ssh},#{h:host}:#{pane_current_path},#{b:pane_current_path}} #[fg=yellow](#{pane_current_command})'  # 样式为 `序号:当前目录 (命令)`
# 自动重命名 window 开启/关闭
bind M setw -q automatic-rename \; display-message "automatic rename window #{?automatic-rename,on,off}"
bind m command-prompt -I "#W" "rename-window '%%'"  # 手动重命名当前窗口


# ------------------------------------------------------------------------------------------------------------------ #
# pane
# ------------------------------------------------------------------------------------------------------------------ #
setw -g pane-base-index 1              # 窗格(pane)编号从 1 开始
set -g display-panes-time 2000         # 按下前缀 q 后, 显示 2 秒钟 pane 编号
bind ! break-pane                      # 将当前窗格分离为一个新的独立窗口

# 前缀 + h/j/k/l : 光标在 pane 间跳转
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# 调整窗格(pane)大小
# -r 表示可以重复使用（repeatable）, 即按一次前缀键, 不停按 H/J/K/L 能调整多次大小
# 区分大小写, 因此是 shift j/...
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r H resize-pane -L 5
bind -r L resize-pane -R 5

# 前缀键 < 或 > : 禁用/启用 当前 pane 的键盘输入
bind < select-pane -d \; display-message "input disabled"
bind > select-pane -e \; display-message "input enabled"


# ------------------------------------------------------------------------------------------------------------------ #
# tmux copy mode
# ------------------------------------------------------------------------------------------------------------------ #
setw -g mode-keys vi
bind -T copy-mode-vi "v" send -X begin-selection            # v 开始选择
bind -T copy-mode-vi "y" send -X copy-selection-and-cancel  # y 复制所选部分并退出 copy mode
set -g @jump-key "Space"    # 按下 前缀 空格, 类似于 nvim 的 leap 光标直接跳转到指定字符

set -g @yank_without_warning true   # 禁止'tmux-yank dependencies not installed'的报错
                                    # 虽然会提醒, 但远程服务器 tmux 复制的内容能正常传递到本地系统剪贴板中
                                    # 可能是 kitty 这类终端模拟器做了什么工作吧...

set -g history-limit 65536      # 设置 tmux 滚动缓冲区历史记录的最大行数为 65536 行
                                # 默认值为 2000 行
                                # 设置更大的值可以查看更久的历史输出，但会占用更多内存
                                # 设置为 0 表示不限制历史记录大小

bind C-k clear-history \; display-message "history cleared"



# ------------------------------------------------------------------------------------------------------------------ #
# Status Bar 
# ------------------------------------------------------------------------------------------------------------------ #
set-option -g status-position top       # move status bar top

# 左侧状态栏显示: [session名称:window序号.pane序号]
# 正常状态下显示为黄色
# 当 pane 输入被禁用时，整个显示会变成红色
set -g status-left '#{?pane_input_off,#[fg=colour160],#[fg=colour136]}[#[fg=colour136]#S:#I.#P#{?pane_input_off,#[fg=colour160],#[fg=colour136]}] '
set -g status-left-length 20        # 左侧状态栏固定长度为 20 字符

# 网速

# 右侧状态栏显示:
# 网速(上行速度/下行速度, xamut/tmux-network-bandwidth 插件提供)
# 内存(图标和百分比, tmux-cpu 插件提供)
# CPU(图标和百分比，tmux-cpu 插件提供)
# 首先检查 $HOME/.name 文件是否存在: 如果存在，显示文件内容; 如果不存在，显示主机名。显示颜色为青色（colour37）
# #[fg=default] 将颜色重置为默认值
set -g status-right '#{network_bandwidth} | RAM: #{ram_percentage} | CPU: #{cpu_percentage} | #[fg=colour37]#([ -f $HOME/.name ] && cat $HOME/.name || hostname) #[fg=default]'
set -g status-right-length 100      # 右侧状态栏固定长度为 100 字符



# ------------------------------------------------------------------------------------------------------------------ #
# color (Solarized 256)                                  
# ------------------------------------------------------------------------------------------------------------------ #
set -g status-style bg=colour235,fg=colour136
setw -g window-status-style fg=colour244
setw -g window-status-current-style fg=colour166
setw -g window-status-activity-style fg=colour61
setw -g window-status-bell-style fg=colour61
set -g pane-border-lines heavy
set -g pane-border-style fg=colour240
set -g pane-active-border-style fg=colour246
set -g message-style bg=colour235,fg=colour166

# pane number display
set -g display-panes-active-colour colour166 #blue
set -g display-panes-colour colour33 #orange

# clock
# 按下 prefix + t 时，会在当前窗格中显示一个时钟
# 时钟会持续显示，直到你按下任意键退出
setw -g clock-mode-colour colour64 #green



# ------------------------------------------------------------------------------------------------------------------ #
# improve colors
# ------------------------------------------------------------------------------------------------------------------ #

set -g default-terminal 'tmux-256color'     # tmux 特有的终端类型，提供最佳的 tmux 集成和真彩色支持

# set -g default-terminal 'xterm-256color'  # 通用的 Xterm 终端类型，提供良好的通用兼容性，真彩色支持
                                            # 当 tmux-256color 出现问题时可以尝试使用

# set -g default-terminal 'screen-256color' # GNU Screen 的终端类型，提供良好的兼容性，真彩色支持
                                            # 可以作为备选方案

set -ga terminal-overrides ",*:Tc"          # 与 default-terminal 设置配合使用
                                            # `set -ga`             表示追加（append）一个全局（global）设置
                                            # `terminal-overrides`  用于覆盖终端的默认设置
                                            # `,*:Tc`               这是一个模式匹配，其中：
                                            # `,*`                  表示匹配所有终端类型
                                            # `Tc`                  表示启用真彩色（True Color）支持
                                            # 这个设置对于现代终端模拟器（如 iTerm2、Kitty、Alacritty 等）非常重要， 
                                            # 因为它允许 tmux 使用 24 位真彩色（1677 万色），而不是传统的 256 色。

# 上面两个配置:
# 首先通过 tmux-256color 告诉 tmux 终端支持 256 色
# 然后通过 Tc 覆盖设置，进一步启用 24 位真彩色支持
# 这样既保证了基本的颜色支持，又能在支持的终端中使用更丰富的颜色
# ------------------------------------------------------------------------------------------------------------------ #



# ------------------------------------------------------------------------------------------------------------------ #
# Misc
# ------------------------------------------------------------------------------------------------------------------ #

# ---- enable yazi image ----
set -g allow-passthrough on
set -ga update-environment TERM
set -ga update-environment TERM_PROGRAM

set -sg escape-time 100   # 将 tmux 的 Escape 键检测延迟设置为 100 毫秒(默认 500 ms)
                          # 设置为 0 会有这个问题: https://github.com/microsoft/vscode/issues/207545

set -g focus-events on  # tmux 与 (n)vim 剪贴板共享

set -g mouse on         # 启用鼠标支持
                        # 1. 用鼠标选择窗格（pane）
                        # 2. 用鼠标调整窗格大小
                        # 3. 用鼠标滚动查看历史记录
                        # 4. 用鼠标点击选择窗口（window）


bind R source-file ~/.tmux.conf \; display-message "configuration reloaded"     # 修改 .tmux.conf 文件后, 
                                                                                # `前缀 R` 重新加载配置文件



# ------------------------------------------------------------------------------------------------------------------ #
# 允许在不修改主配置文件的情况下添加本地特定的配置
# 如果当前用户的主目录下存在 .tmux_local.conf 文件，则执行它
# 应该在所有主要配置之后加载，这样 .tmux_local.conf 中的配置可以覆盖主配置文件中的设置
# TPM 的初始化 (run '~/.tmux/plugins/tpm/tpm') 必须放在文件的最底部
# ------------------------------------------------------------------------------------------------------------------ #
if-shell "[ -f ~/.tmux_local.conf ]" 'source ~/.tmux_local.conf'



# ------------------------------------------------------------------------------------------------------------------ #
#                                    TMUX Plugin                                        
# ------------------------------------------------------------------------------------------------------------------ #

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-cpu'
# set -g @plugin 'tmux-plugins/tmux-net-speed' # 这个只能 Linux 用，macOS 用不了
set -g @plugin 'xamut/tmux-network-bandwidth' # 这个让 macOS, Linux 都能用，但需要安装相关依赖软件。macOS: brew install gawk coreutils ;Linux: apt-get install gawk net-tools coreutils
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'schasse/tmux-jump'


# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
